class Solution
{
    public:
    //Function to find maximum of minimums of every window size.
    vector <int> maxOfMin(int arr[], int n)
    {
        // Your code here
        vector<int>left(n),right(n);
        stack<int> st;
        for(int i=0;i<n;i++){
            if(st.empty())left[i]=-1;
            else{
                if(arr[st.top()]>=arr[i]){
                    while(!st.empty() && arr[st.top()]>=arr[i])st.pop();
                    if(st.empty())left[i]=-1;
                    else left[i]=st.top();
                }else left[i]=st.top();
            }
            st.push(i);
        }
        while(!st.empty())st.pop();
        for(int i=n-1;i>=0;i--){
            if(st.empty())right[i]=n;
            else{
                if(arr[st.top()]>=arr[i]){
                    while(!st.empty() && arr[st.top()]>=arr[i])st.pop();
                    if(st.empty())right[i]=n;
                    else right[i]=st.top();
                }else right[i]=st.top();
            }
            st.push(i);
        }
        
        vector<int>len(n);
        for(int i=0;i<n;i++){
            len[right[i]-left[i]-2]=max(len[right[i]-left[i]-2],arr[i]);
        }
        for(int i=n-2;i>=0;i--)len[i]=max(len[i],len[i+1]);
        
        return len;
        
    }
};
