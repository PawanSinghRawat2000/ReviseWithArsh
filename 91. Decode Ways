class Solution {
public:

    int solve(int ind,string s){
        if(ind==s.length())return 1;
        if(s[ind]=='0')return 0;

        int one=solve(ind+1,s);
        int two=0;
        if(ind<s.length()-1 && (s[ind]=='1' || (s[ind]=='2' && s[ind+1]<'7')))two=solve(ind+2,s);
        return one+two;
    }

    int numDecodings(string s) {
        if(s.empty())return 0;
        return solve(0,s);
    }
};

------------------------------------------------------------------------------

class Solution {
public:
    int dp[101];
    int solve(int ind,string &s){
        if(ind==s.length())return 1;
        if(s[ind]=='0')return 0;
        if(dp[ind]!=-1)return dp[ind];
        int one=solve(ind+1,s);
        int two=0;
        if(ind<s.length()-1 && (s[ind]=='1' || (s[ind]=='2' && s[ind+1]<'7')))two=solve(ind+2,s);
        return dp[ind]=one+two;
    }

    int numDecodings(string s) {
        if(s.empty())return 0;
        memset(dp,-1,sizeof(dp));
        return solve(0,s);
    }
};
