class Solution {
public:

    int lcs(string s,string rev,int n,int m){
        if(n==0 || m==0)return 0;
        if(s[n-1]==rev[m-1])return 1+lcs(s,rev,n-1,m-1);
        else return max(lcs(s,rev,n-1,m),lcs(s,rev,n,m-1));
    }

    int minInsertions(string s) {
        string rev=s;
        reverse(rev.begin(),rev.end());
        int n,m;n=m=s.size();
        return n-lcs(s,rev,n,m);
    }
};
--------------------------------------------------------------------
class Solution {
public:
    int dp[501][501];
    int lcs(string &s,string &rev,int n,int m){
        if(n==0 || m==0)return 0;
        if(dp[n][m]!=-1)return dp[n][m];
        if(s[n-1]==rev[m-1])dp[n][m]= 1+lcs(s,rev,n-1,m-1);
        else dp[n][m]= max(lcs(s,rev,n-1,m),lcs(s,rev,n,m-1));
        return dp[n][m];
    }

    int minInsertions(string s) {
        string rev=s;
        reverse(rev.begin(),rev.end());
        memset(dp,-1,sizeof(dp));
        int n,m;n=m=s.size();
        return n-lcs(s,rev,n,m);
    }
};
---------------------------------------------------------------------
class Solution {
public:

    int minInsertions(string s) {
        string rev=s;
        reverse(rev.begin(),rev.end());
        int n=s.size();
        vector<vector<int>>dp(n+1,vector<int>(n+1));
        for(int i=0;i<n+1;i++)dp[i][0]=0;
        for(int i=0;i<n+1;i++)dp[0][i]=0;

        for(int i=1;i<n+1;i++){
            for(int j=1;j<n+1;j++){
                if(s[i-1]==rev[j-1])dp[i][j]=1+dp[i-1][j-1];
                else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return n-dp[n][n];

    }
};
