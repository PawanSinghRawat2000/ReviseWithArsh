class Solution {
public:

    bool isSafe(vector<string>&board,int row,int col,int n){
        int dupRow=row;
        int dupCol=col;
        //check row
        while(col>=0){
            if(board[row][col]=='Q')return false;
            col--;
        }

        row=dupRow;
        col=dupCol;
        //check upper left diagonal
        while(row>=0 && col>=0){
            if(board[row][col]=='Q')return false;
            row--;col--;
        }
        row=dupRow;
        col=dupCol;
        //check lower left diagonal
        while(row<n && col>=0){
            if(board[row][col]=='Q')return false;
            row++;col--;
        }
        return true;
        
    }

    void solve(vector<string>&board,int col,int n,vector<vector<string>>&ans){
        if(col==n){
            ans.push_back(board);
            return;
        }
        for(int row=0;row<n;row++){
            if(isSafe(board,row,col,n)){
                board[row][col]='Q';
                solve(board,col+1,n,ans);
                board[row][col]='.';
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string>board(n);
        string s(n,'.');
        for(int i=0;i<n;i++){
            board[i]=s;
        }
        solve(board,0,n,ans);
        return ans;
    }
};
