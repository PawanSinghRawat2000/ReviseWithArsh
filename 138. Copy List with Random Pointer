/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head==NULL)return head;
        //insert Node between every node
        Node* temp=head;
        while(temp){
            Node* newNode=new Node(temp->val);
            newNode->next=temp->next;
            temp->next=newNode;
            temp=temp->next->next;
        }

        //random pointer
        temp=head;
        while(temp){
            temp->next->random=(temp->random)?temp->random->next:NULL;
            temp=temp->next->next;
        }
        //seperation
        Node* orig=head;
        Node* copy=head->next;
        temp=copy;
        while(orig && orig->next){
            orig->next=orig->next->next;
            copy->next=(copy->next)?copy->next->next:NULL;
            orig=orig->next;
            copy=copy->next;
        }
        return temp;

    }
};
