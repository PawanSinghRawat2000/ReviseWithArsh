class Solution{
public:
        int delRow[4] = {-1, 0, +1, 0};
        int delCol[4] = {0, +1, 0, -1};
    void dfs(int row, int col, vector<vector<char>> mat, vector<vector<int>> &vis,int n, int m){
        vis[row][col] = 1;
        for(int i=0;i<4;i++){
            int nRow = row + delRow[i];
            int nCol = col + delCol[i];
            if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && 
            !vis[nRow][nCol] && mat[nRow][nCol] == 'O'){
                dfs(nRow, nCol, mat, vis, n, m);
            }
        }
    }

    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        // code here
        vector<vector<int>> vis(n, vector<int>(m, 0));
        // TRAVERSING FIRST & LAST ROW
        for(int j=0;j<m;j++){
            if(!vis[0][j] && mat[0][j] == 'O'){
                dfs(0, j, mat, vis, n, m);
            }
            if(!vis[n-1][j] && mat[n-1][j] == 'O'){
                dfs(n-1, j, mat, vis, n, m);
            }
        }
        // TRAVERSING FIRST & LAST COLUMN
        for(int i=0;i<n;i++){
            if(!vis[i][0] && mat[i][0] == 'O'){
                dfs(i, 0, mat, vis,n, m);
            }
            if(!vis[i][m-1] && mat[i][m-1] == 'O'){
                dfs(i, m-1, mat, vis,n, m);
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j] == 'O' && !vis[i][j])
                    mat[i][j] = 'X';
            }
        }
        return mat;
    }
};
