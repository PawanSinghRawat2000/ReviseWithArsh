class Solution {
public:
    int k=2;
    unordered_map<int,int> mp;
    int dx[4]={1,-1,0,0};
    int dy[4]={0,0,1,-1};

    void dfs(int x,int y,vector<vector<int>>&grid,int n){
        if(x<0 || x>=n || y<0 || y>=n )return;
        if(grid[x][y]!=1)return;

        mp[k]++;
        grid[x][y]=k;
        dfs(x+1,y,grid,n);
        dfs(x-1,y,grid,n);
        dfs(x,y+1,grid,n);
        dfs(x,y-1,grid,n);
    }


    int largestIsland(vector<vector<int>>& grid) {
        int n=grid.size();
        int area=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    dfs(i,j,grid,n);
                    area=max(area,mp[k]);
                    k++;
                }
            }
        }
        queue<pair<int,int>>q;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0){
                    q.push({i,j});
                }
            }
        }
        while(!q.empty()){
            int x=q.front().first;
            int y=q.front().second;
            q.pop();
            unordered_set<int> s;
            int temp=0;
            for(int i=0;i<4;i++){
                int newx=x+dx[i];
                int newy=y+dy[i];
                if(newx<0 || newx>=n || newy<0 || newy>=n)continue;
                if(grid[newx][newy]==0)continue;
                int val=grid[newx][newy];
                if(s.find(val)==s.end()){
                    s.insert(val);
                    temp+=mp[val];
                }
                
            }
            area=max(area,temp+1);
        }
        return area;
    }
};
