//TLE
// User function Template for C++

class Solution{
public:

    int solve(int ind,int arr[],int sum){
        if(sum==0)return 1;
        if(ind<0)return 0;
        int take=0;
        if(arr[ind]<=sum)take=solve(ind-1,arr,sum-arr[ind]);
        int notTake=solve(ind-1,arr,sum);
        return take+notTake;
    }

    int equalPartition(int N, int arr[])
    {
        // code here
        int sum=0;
        for(int i=0;i<N;i++)sum+=arr[i];
        
        if(sum%2!=0)return 0;
        sum=sum/2;
        return solve(N-1,arr,sum);
    }
};
-------------------------------------------------------------------------------------------------------------------------------

class Solution{
public:

    int solve(int ind,int arr[],int sum,vector<vector<int>> &dp){
        if(sum==0)return 1;
        if(ind<0)return 0;
        if(dp[ind][sum]!=-1)return dp[ind][sum];
        int take=0;
        if(arr[ind]<=sum)take=solve(ind-1,arr,sum-arr[ind],dp);
        int notTake=solve(ind-1,arr,sum,dp);
        return dp[ind][sum]= take+notTake;
    }

    int equalPartition(int N, int arr[])
    {
        // code here
        int sum=0;
        for(int i=0;i<N;i++)sum+=arr[i];
        
        if(sum%2!=0)return 0;
        sum=sum/2;
        vector<vector<int>> dp(N+1,vector<int>(sum+1,-1));
        return solve(N-1,arr,sum,dp);
    }
};
----------------------------------------------------------------------------------------------------------------------------------------
class Solution{
public:

    int equalPartition(int N, int arr[])
    {
        // code here
        int sum=0;
        for(int i=0;i<N;i++)sum+=arr[i];
        
        if(sum%2!=0)return 0;
        sum=sum/2;
        vector<vector<int>> dp(N+1,vector<int>(sum+1));
        for(int i=0;i<=N;i++)dp[i][0]=1;
        for(int j=0;j<=sum;j++)dp[0][j]=0;
        dp[0][0]=1;
        
        for(int i=1;i<=N;i++){
            for(int j=1;j<=sum;j++){
                if(arr[i-1]<=j)dp[i][j]=dp[i-1][j-arr[i-1]] || dp[i-1][j] ;
                else dp[i][j]=dp[i-1][j];
            }
        }
        return dp[N][sum];
    }
};
