class Solution {
public:

    int solve(vector<int>& nums,int n){
        if(n<0)return 0;

        int take=0,notTake=0;
        notTake=solve(nums,n-1);
        int i=n,sum=0;
        while(i>=0 && nums[i]==nums[n]){
            sum+=nums[i];
            i--;
        }
        while(i>=0 && nums[i]==nums[n]-1){
            i--;
        }
        take=sum+solve(nums,i);
        return max(take,notTake);
    }

    int deleteAndEarn(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        //vector<int> dp(n+1,-1);
        return solve(nums,n-1);
    }
};
--------------------------------------------------------------------

class Solution {
public:

    int solve(vector<int>& nums,int n,vector<int>&dp){
        if(n<0)return 0;
        if(dp[n]!=-1)return dp[n];
        int take=0,notTake=0;
        notTake=solve(nums,n-1,dp);
        int i=n,sum=0;
        while(i>=0 && nums[i]==nums[n]){
            sum+=nums[i];
            i--;
        }
        while(i>=0 && nums[i]==nums[n]-1){
            i--;
        }
        take=sum+solve(nums,i,dp);
        return dp[n]=max(take,notTake);
    }

    int deleteAndEarn(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        vector<int> dp(n+1,-1);
        return solve(nums,n-1,dp);
    }
};
------------------------------------------------------------------------------

class Solution {
public:

    int deleteAndEarn(vector<int>& nums) {
        int n=*max_element(nums.begin(),nums.end());
        vector<int> dp(n+1);
        for(auto it:nums)dp[it]+=it;
        for(int i=2;i<=n;i++){
            dp[i]=max(dp[i]+dp[i-2],dp[i-1]);
        }
        return dp[n];

    }
};
