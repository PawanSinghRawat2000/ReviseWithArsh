class comp{
    public:
    bool operator()(ListNode* l1,ListNode* l2){
        return l1->val>l2->val;
    }
};

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*,vector<ListNode*>,comp>pq;
        for(auto it:lists){
            if(it!=NULL)pq.push(it);
        }

       ListNode* nhead=new ListNode(0);
        ListNode* ntail=nhead;
        while(!pq.empty()){
            ListNode* curr=pq.top();
            pq.pop();
            ntail->next=curr;
            ntail=ntail->next;
            if(curr!=NULL && curr->next!=NULL)pq.push(curr->next);

        }
        return nhead->next;

    }
};

