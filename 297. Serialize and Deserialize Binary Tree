class Codec {
public:

    // Encodes a tree to a single string.

    void preorder(TreeNode* root,string &ans){
        if(root==NULL){
            ans+="null,";
            return;
        }
        ans+=to_string(root->val)+",";
        preorder(root->left,ans);
        preorder(root->right,ans);
    }

    string serialize(TreeNode* root) {
        string ans="";
        preorder(root,ans);
        return ans;
    }

    TreeNode* buildTree(queue<string>&q){
        string s=q.front();q.pop();
        if(s=="null")return NULL;

        TreeNode* root=new TreeNode(stoi(s));
        root->left=buildTree(q);
        root->right=buildTree(q);
        return root;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        string temp="";
        queue<string>q;
        for(auto i:data){
            if(i==','){
                q.push(temp);
                temp="";
            }else temp+=i;
        }
        return buildTree(q);
        
    }
};
