class Solution {
public:
    vector<int>preSum;
    int solve(int i,int j,int h){
        if(i>=j)return 0;
        int ans=INT_MAX;
        for(int k=i;k<j;k+=h-1){
            ans=min(ans,solve(i,k,h)+solve(k+1,j,h));
        }
        if((j-i)%(h-1)==0)ans+=preSum[j+1]-preSum[i];
        return ans;
    }

    int mergeStones(vector<int>& stones, int k) {
        int n=stones.size();
        if((n-1)%(k-1)!=0)return -1;
        preSum.resize(n+1,0);
        for(int i=0;i<n;i++)preSum[i+1]=preSum[i]+stones[i];
        return solve(0,n-1,k);
    }
};
------------------------------------------------------------------------------

class Solution {
public:
    vector<int>preSum;
    int solve(int i,int j,int h,vector<vector<int>>&dp){
        if(i>=j)return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        int ans=INT_MAX;
        for(int k=i;k<j;k+=h-1){
            ans=min(ans,solve(i,k,h,dp)+solve(k+1,j,h,dp));
        }
        if((j-i)%(h-1)==0)ans+=preSum[j+1]-preSum[i];
        return dp[i][j]= ans;
    }

    int mergeStones(vector<int>& stones, int k) {
        int n=stones.size();
        if((n-1)%(k-1)!=0)return -1;
        preSum.resize(n+1,0);
        for(int i=0;i<n;i++)preSum[i+1]=preSum[i]+stones[i];
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        return solve(0,n-1,k,dp);
    }
};
