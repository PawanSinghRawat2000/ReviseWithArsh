class Solution{


	public:
	int dx[5]={1,-1,0,0,0};
	int dy[5]={0,0,1,-1,0};
	int solve(int x,int y,int n,vector<vector<vector<long long>>>&dp){
	    
	    if(n==0)return 1;
	    if(dp[x][y][n]!=-1)return dp[x][y][n];
	    long long ans=0;
        for(int i=0;i<5;i++){
            int newx=x+dx[i];
            int newy=y+dy[i];
            if(newx>=0 && newy>=0 && newx<3 && newy<3)ans+=solve(newx,newy,n-1,dp);
            else if(newx==3 && newy==1)ans+=solve(newx,newy,n-1,dp);
        }
        return dp[x][y][n]=ans;
	}
	
	long long getCount(int n)
	{
		// Your code goes here
		int ans=0;
		vector<vector<vector<long long>>> dp(5,vector<vector<long long>>(4,vector<long long>(n+1,-1)));
		for(int i=0;i<=3;i++){
            for(int j=0;j<3;j++){
                if(i==3 && j!=1)continue;
                ans+=solve(i,j,n-1,dp);
            }
        }
		return ans;
	}

};

-------------------------------------------------------

class Solution{
	public:
	int mat[4][3] = {{1,2,3},
                 {4,5,6},
                 {7,8,9},
                 {-1,0,-1}};
                 
    int dx[5] = {0,-1,0,1,0};
    int dy[5] = {0,0,1,0,-1};
    
    long long int dp[10][26];
    
    long long solve(int x,int y,int n){
        if(n==1)return 1;
        if(dp[mat[x][y]][n]!=-1)return dp[mat[x][y]][n];
        long long ans=0;
        for(int i=0;i<5;i++){
            int newx=x+dx[i];
            int newy=y+dy[i];
            if(newx>=0 && newy>=0 && newx<=3 && newy<3){
                if(mat[newx][newy]==-1)continue;
                ans+=solve(newx,newy,n-1);
            }
            
        }
        return dp[mat[x][y]][n]=ans;
        
    }
    
	long long getCount(int n)
	{
		// Your code goes here
		long long int ans=0;
		dp[10][n+1];
		memset(dp,-1,sizeof(dp));
		for(int i=0;i<4;i++){
		    for(int j=0;j<3;j++){
		        if(mat[i][j]!=-1)ans+=solve(i,j,n);
		    }
		}
		return ans;
	}
};
