class Solution {
public:
    bool isPalindrome(string &s){
        int i=0,j=s.length()-1;
        while(i<=j){
            if(s[i]!=s[j])return false;
            i++;j--;
        }
        return true;

    }

    void solve(string s,int ind,int n,set<string>&st,string &temp){
        if(ind==n){
            if(isPalindrome(temp) && temp.size()>0)st.insert(temp);
            return;
        }
        temp.push_back(s[ind]);
        solve(s,ind+1,n,st,temp);
        temp.pop_back();
        solve(s,ind+1,n,st,temp);

    }

    int countPalindromicSubsequences(string s) {
        set<string> st;
        string temp="";
        solve(s,0,s.length(),st,temp);
        return st.size();
    }
};

----------------------------------------------------------------------------------
class Solution {
public:
    const int mod=1e9+7;
    int solve(string &s,int i,int j){
        if(i>j)return 0;
        if(i==j)return 1;
        int num=0;
        if(s[i]==s[j]){
            num=(2*solve(s,i+1,j-1)%mod);
            int left=i+1,right=j-1;
            while(left<=right && s[left]!=s[i])left++;
            while(left<=right && s[right]!=s[j])right--;

            if(left<right)num-=solve(s,left+1,right-1);
            else if(left==right)num+=1;
            else num+=2;
        }else num=(solve(s,i+1,j)%mod+solve(s,i,j-1)%mod-solve(s,i+1,j-1)%mod)%mod; 
       return num;

    }

    int countPalindromicSubsequences(string s) {

       return solve(s,0,s.length()-1);
        
    }
};
---------------------------------------------------------------------------------------

class Solution {
public:
    const int mod=1e9+7;
    int solve(string &s,int i,int j,vector<vector<int>>&dp){
        if(i>j)return 0;
        if(i==j)return 1;
        if(dp[i][j]!=-1)return dp[i][j];
        int num=0;
        if(s[i]==s[j]){
            num=(2*solve(s,i+1,j-1,dp)%mod);
            int left=i+1,right=j-1;
            while(left<=right && s[left]!=s[i])left++;
            while(left<=right && s[right]!=s[j])right--;

            if(left<right)num-=solve(s,left+1,right-1,dp);
            else if(left==right)num+=1;
            else num+=2;
        }else num=(solve(s,i+1,j,dp)%mod+solve(s,i,j-1,dp)%mod-solve(s,i+1,j-1,dp)%mod)%mod; 
       return dp[i][j]= num<0?num+mod:num%mod;

    }

    int countPalindromicSubsequences(string s) {
        int n=s.length();
        vector<vector<int>>dp(n,vector<int>(n,-1));
       return solve(s,0,n-1,dp);
        
    }
};
