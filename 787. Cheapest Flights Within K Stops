class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair<int,int>>> adj(n);
        for(auto it:flights){
            adj[it[0]].push_back({it[1],it[2]});
        }
        vector<int> dist(n,1e9);
        dist[src]=0;
        queue<pair<int,int>> q;
        q.push({src,0});   //node,dist
        k=k+1;
        while(!q.empty() && k-- >0){
            int sz=q.size();
            while(sz--){
                auto it=q.front();q.pop();
                int node=it.first;
                int distance=it.second;
                for(auto &[v,wt]:adj[node]){
                    if(dist[v]>distance+wt){
                        dist[v]=distance+wt;
                        q.push({v,dist[v]});
                    }
                }
            }
        }
        if(dist[dst]==1e9)return -1;
        return dist[dst];

    }
};
