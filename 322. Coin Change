class Solution {
public:

    int solve(vector<int>&coins,int amount,int idx){
        if(idx<0 || amount<0)return INT_MAX-1;
        if(amount==0)return 0;

        int take= 1+solve(coins,amount-coins[idx],idx);

        int notTake=solve(coins,amount,idx-1);
        return min(take,notTake);
    }

    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        int ans= solve(coins,amount,n-1);
        return ans==INT_MAX-1?-1:ans;
    }
};
------------------------------------------------------------------------------

class Solution {
public:

    int solve(vector<int>&coins,int amount,int idx,vector<vector<int>> &dp){
        if(idx<0 || amount<0)return INT_MAX-1;
        if(amount==0)return 0;
        if(dp[idx][amount]!=-1)return dp[idx][amount];
        int take= 1+solve(coins,amount-coins[idx],idx,dp);

        int notTake=solve(coins,amount,idx-1,dp);
        return dp[idx][amount]= min(take,notTake);
    }

    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>> dp(n+1,vector<int>(amount+1,-1));
        int ans= solve(coins,amount,n-1,dp);
        
        return ans==INT_MAX-1?-1:ans;
    }
};

---------------------------------------------------------------------------------------

class Solution {
public:

    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>> dp(n+1,vector<int>(amount+1));
        
        for(int i=0;i<=n;i++)dp[i][0]=0;
        for(int i=0;i<=amount;i++)dp[0][i]=INT_MAX-1;

        for(int i=1,j=1;j<=amount;j++){
            if(j%coins[0]==0)dp[i][j]=j/coins[0];
            else dp[i][j]=INT_MAX-1;
        }
        for(int i=2;i<=n;i++){
            for(int j=1;j<=amount;j++){
                if(coins[i-1]<=j)dp[i][j]=min(1+dp[i][j-coins[i-1]],dp[i-1][j]);
                else dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][amount]>amount?-1:dp[n][amount];
    }
};
