class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        int left[n],right[n];
        left[0]=height[0];
        for(int i=1;i<n;i++){
            left[i]=max(left[i-1],height[i]);
        }
        right[n-1]=height[n-1];
        for(int i=n-2;i>=0;i--){
            right[i]=max(right[i+1],height[i]);
        }
        int ans=0;
        for(int i=0;i<n;i++){
            ans+=min(left[i],right[i])-height[i];
        }
        
        return ans;
    }
};
---------------------------------------------------------------------------

class Solution {
public:
    int trap(vector<int>& height) {
        int left=0,right=height.size()-1;
        int leftMax=0,rightMax=0;
        int ans=0;
        while(left<=right){
            if(height[left]<=height[right]){
                if(height[left]>leftMax)leftMax=height[left];
                else ans+=leftMax-height[left];
                left++;
            }else{
                if(height[right]>rightMax)rightMax=height[right];
                else ans+=rightMax-height[right];
                right--;
            }
        }
        return ans;
    }
};
