class Solution {
public:
    int dx[4]={1,-1,0,0};
    int dy[4]={0,0,1,-1};
    int empty=1,count=0;
    void solve(int x,int y,int m,int n,vector<vector<int>>& grid,int &ans, vector<vector<int>> &vis){

        if(grid[x][y]==2 && count==empty){
            ans++;
            return;
        }

        for(int i=0;i<4;i++){
                int newx=x+dx[i];
                int newy=y+dy[i];
                if(newx<0 || newx>=m || newy<0 || newy>=n)continue;
                else if(!vis[newx][newy] && grid[newx][newy]!=-1){
                    vis[x][y]=1;
                    count++;
                    solve(newx,newy,m,n,grid,ans,vis);
                    count--;
                    vis[newx][newy]=0;
                }   
        }   
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        vector<vector<int>> vis(m,vector<int>(n,0));

        int ans=0;
        int si,sj;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    si=i;sj=j;
                }else if(grid[i][j]==0)empty++;
            }
        }
        vis[si][sj]=1;
        solve(si,sj,m,n,grid,ans,vis);
        return ans;
    }
};
