//EGG DROPPING MCM

//RECURSIVE 
class Solution {
public:
    int superEggDrop(int n, int f) {
        if(f==0 || f==1)return f;
        if(n==1)return f;

        int mini=INT_MAX;
        for(int k=1;k<=f;k++){
            int tempans=1+max(superEggDrop(n-1,k-1),superEggDrop(n,f-k));
            mini=min(mini,tempans);
        }
        return mini;
    }
};

--------------------------------------------------
//MEMO
class Solution {
public:

    int solve(int e,int f,vector<vector<int>>&dp){
        if(f==0 || f==1)return f;
        if(e==1)return f;
        if(dp[e][f]!=-1)return dp[e][f];
        int mini=INT_MAX;
        for(int k=1;k<=f;k++){
            // if(dp[e-1][k-1]!=-1){
            //     low=dp[e-1][k-1];
            // }else{
            //     low=solve()
            // }
            int tempans=1+max(solve(e-1,k-1,dp),solve(e,f-k,dp));
            mini=min(mini,tempans);
        }
        return dp[e][f]=mini;
    }
    
    int superEggDrop(int n, int f) {
        vector<vector<int>>dp(n+1,vector<int>(f+1,-1));
        return solve(n,f,dp);
    }
};

---------------------------------------------------------------------------
//OPTIMISED MEMO
class Solution {
public:

    int solve(int e,int f,vector<vector<int>>&dp){
        if(f==0 || f==1)return f;
        if(e==1)return f;
        if(dp[e][f]!=-1)return dp[e][f];
        int mini=INT_MAX;
        for(int k=1;k<=f;k++){
            int low=0,high=0;
            if(dp[e-1][k-1]!=-1){
                low=dp[e-1][k-1];
            }else{
                low=solve(e-1,k-1,dp);
                dp[e-1][k-1]=low;
            }
            if(dp[e][f-k]!=-1){
                high=dp[e][f-k];
            }else{
                high=solve(e,f-k,dp);
                dp[e][f-k]=high;
            }
            int tempans=1+max(low,high);
            mini=min(mini,tempans);
        }
        return dp[e][f]=mini;
    }
    
    int superEggDrop(int n, int f) {
        vector<vector<int>>dp(n+1,vector<int>(f+1,-1));
        return solve(n,f,dp);
    }
};

-----------------------------------------------------------------------------------------
//MCM+BINARY SEARCH
class Solution {
public:

    int solve(int e,int f,vector<vector<int>>&dp){
        if(f==0 || f==1)return f;
        if(e==1)return f;
        if(dp[e][f]!=-1)return dp[e][f];
        int mini=INT_MAX,low=0,high=f;
        while(low<=high){
            int mid=(low+high)/2;
            int left=solve(e-1,mid-1,dp);
            int right=solve(e,f-mid,dp);
            int temp=1+max(left,right);
            if(left<right)low=mid+1;
            else high=mid-1;
            mini=min(mini,temp);
        }


        return dp[e][f]=mini;
    }
    
    int superEggDrop(int n, int f) {
        vector<vector<int>>dp(n+1,vector<int>(f+1,-1));
        return solve(n,f,dp);
    }
};
