class Solution {
public:

    int findParent(int u,vector<int>&parent){
        if(parent[u]==u)return u;
        return parent[u]=findParent(parent[u],parent);
    }


    void unionSet(int u,int v,vector<int>&parent){
        u=findParent(u,parent);
        v=findParent(v,parent);
        if(parent[u]==parent[v])return;
        else parent[v]=u;
    }


    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        vector<int> parent(1001);
        vector<int>ans(2);
        for(int i=0;i<1001;i++)parent[i]=i;
        for(auto it:edges){
            int u=it[0];
            int v=it[1];
            if(findParent(u,parent)==findParent(v,parent)){
                ans[0]=u;
                ans[1]=v;
                break;
            }else{
                unionSet(u,v,parent);
            }
        }
        return ans;
    }
};
