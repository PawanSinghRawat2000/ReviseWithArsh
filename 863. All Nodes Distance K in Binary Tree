class Solution {
public:

    void markParents(TreeNode* root,map<TreeNode*,TreeNode*> &parent){
        if(root == NULL)return;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            auto it=q.front();q.pop();
            if(it->left){
                parent[it->left]=it;
                q.push(it->left);
            }
            if(it->right){
                parent[it->right]=it;
                q.push(it->right);
            }
        }
    }

    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        //mark parents
        map<TreeNode*,TreeNode*> parent;  //node->parent
        markParents(root,parent);

        queue<TreeNode*> q;
        map<TreeNode*,bool> vis;
        q.push(target);
        vis[target]=true;
        int currDist=0;
        while(!q.empty()){
            int sz=q.size();
            if(currDist==k)break;
            for(int i=0;i<sz;i++){
                TreeNode* node=q.front();q.pop();
                if(node->left && !vis[node->left]){
                    vis[node->left]=true;
                    q.push(node->left);
                }
                if(node->right && !vis[node->right]){
                    vis[node->right]=true;
                    q.push(node->right);
                }
                if(parent[node] && !vis[parent[node]]){
                    vis[parent[node]]=true;
                    q.push(parent[node]);
                }
                
            }
            currDist++;
        }
        vector<int> ans;
        while(!q.empty()){
            ans.push_back(q.front()->val);q.pop();
        }
        return ans;
    }
};
