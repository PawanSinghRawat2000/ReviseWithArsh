class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int dx[]={0,0,1,-1};
        int dy[]={1,-1,0,0};
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>>pq;
        vector<vector<int>> vis(n,vector<int>(m,0));
        pq.push({grid[0][0],{0,0}});
        vis[0][0]=1;
        while(!pq.empty()){
            int time=pq.top().first;
            int x=pq.top().second.first;
            int y=pq.top().second.second;
            pq.pop();

            if(x==n-1 && y==m-1)return time;
            for(int i=0;i<4;i++){
                int newx=x+dx[i];
                int newy=y+dy[i];
                if(newx>=0 && newx<n && newy>=0 && newy<m){
                    if(!vis[newx][newy]){
                        vis[newx][newy]=1;
                        if(grid[newx][newy]<=time)pq.push({time,{newx,newy}});
                        else pq.push({grid[newx][newy],{newx,newy}});
                    }
                    
                }
            }
        }
        return 0;
    }
};
