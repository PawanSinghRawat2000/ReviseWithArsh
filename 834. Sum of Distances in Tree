class Solution {
public:
    vector<vector<int>>adj;
    vector<int> counter,ans;


    void dfs(int i,int p=-1){
        for(auto u:adj[i]){
            if(u==p)continue;
            dfs(u,i);
            counter[i]+=counter[u];
            ans[i]+=ans[u]+counter[u];
        }
        counter[i]+=1;
    }


    void dfs2(int i,int n,int p=-1){
        for(auto u:adj[i]){
            if(u==p)continue;
            ans[u]=ans[i]-counter[u]+n-counter[u];
            dfs2(u,n,i);
        }
    }

    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        adj.resize(n);
        for(int i=0;i<n-1;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        ans.resize(n);
        counter.resize(n);
        dfs(0);
        dfs2(0,n);
        return ans;

 
    }
};
