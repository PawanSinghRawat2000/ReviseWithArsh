class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        if(grid.empty())return 0;
        int ans=0,count=0,total=0;
        queue<pair<int,int>> q;
        int n=grid.size();
        int m=grid[0].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]!=0)total++;
                if(grid[i][j]==2){
                    q.push({i,j});
                }
            }
        }
        int dx[]={1,-1,0,0};
        int dy[]={0,0,1,-1};
        
        while(!q.empty()){
            int k=q.size();
            count+=k;
            while(k--){
             int x=q.front().first,y=q.front().second;
             q.pop();
             for(int i=0;i<4;i++){
                 int nx=x+dx[i],ny=y+dy[i];
                 if(nx<0 || nx>=n || ny<0 || ny>=m || grid[nx][ny]!=1)continue;
                 grid[nx][ny]=2;
                 q.push({nx,ny});
             }
             
            }
            if(!q.empty())ans++;
        }
        if(count==total)return ans;
        return -1;
        
    }
};
