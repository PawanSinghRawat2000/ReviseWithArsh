class Solution {
public:
    
    bool dfs(int node,vector<vector<int>>& graph,vector<int>&vis,vector<int>&dfsVis,vector<int>&safe){
        vis[node]=1;
        dfsVis[node]=1;
        for(auto it:graph[node]){
            if(!vis[it]){
                if(dfs(it,graph,vis,dfsVis,safe)){
                    safe[it]=0;
                    return true;
                }
            }else if(dfsVis[it]){
                    safe[it]=0;
                    return true;
            }
        }
        
        dfsVis[node]=0;
        safe[node]=1;
        return false;

    }

    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        //cycle detection in directed graph
        int n=graph.size();
        vector<int>vis(n,0);
        vector<int>dfsVis(n,0);
        vector<int> safe(n,0);
        for(int i=0;i<n;i++){
            if(!vis[i])dfs(i,graph,vis,dfsVis,safe);
        }

        vector<int>ans;
        for(int i=0;i<n;i++){
            if(safe[i])ans.push_back(i);
        }
        return ans;
    }
};
