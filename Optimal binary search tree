class Solution{
    public:
    int dp[101][101];
    int buildTree(int start,int end,int freq[]){
        if(start>end)return 0;
        if(start==end)return freq[start];
        if(dp[start][end]!=-1)return dp[start][end];
        int ans=INT_MAX;
        for(int i=start;i<=end;i++){
            int left=buildTree(start,i-1,freq);
            int right=buildTree(i+1,end,freq);
            ans=min(ans,left+right);
        }
        for(int i=start;i<=end;i++)ans+=freq[i];
        return dp[start][end]= ans;
    }
    
    int optimalSearchTree(int keys[], int freq[], int n)
    {
        // code here
        memset(dp,-1,sizeof(dp));
        return buildTree(0,n-1,freq);
    }
};
