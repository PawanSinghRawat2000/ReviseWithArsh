class Solution 
{
    public:
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    // Code here
	    int x1=KnightPos[0]-1,y1=KnightPos[1]-1;
	    int x2=TargetPos[0]-1,y2=TargetPos[1]-1;
	    if(x1==x2 && y1==y2)return 0;
	    
	    queue<pair<int,int>>  q;
	    q.push({x1,y1});
	    int dx[]={-1,-1,1,1,2,2,-2,-2};
	    int dy[]={2,-2,2,-2,1,-1,1,-1};
	    vector<vector<int>> v(N,vector<int>(N,0));
	    while(!q.empty()){
	        int x=q.front().first;
	        int y=q.front().second;
	        q.pop();
	        for(int i=0;i<8;i++){
	            int nx=x+dx[i];
	            int ny=y+dy[i];
	            if(nx>=0 && nx<N && ny>=0 && ny<N && v[nx][ny]==0){
	                v[nx][ny]=1+v[x][y];
	                q.push({nx,ny});
	            }
	        }
	        
	    }
	    return v[x2][y2];
	    
	    
	}
};
