class Solution {
public:

    int solve(int i,int j,int n,int m,vector<vector<int>>& mat,vector<vector<int>>&dp){
        if(i<0 || i>=n || j<0 || j>=m )return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        
        int a=0,b=0,c=0,d=0;
        if(i>0 && mat[i-1][j]>mat[i][j])a=solve(i-1,j,n,m,mat,dp);
        if(j>0 && mat[i][j-1]>mat[i][j])b=solve(i,j-1,n,m,mat,dp);
        if(i<n-1 && mat[i+1][j]>mat[i][j])c=solve(i+1,j,n,m,mat,dp);
        if(j<m-1 && mat[i][j+1]>mat[i][j])d=solve(i,j+1,n,m,mat,dp);

        return dp[i][j]=1+max({a,b,c,d});
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int n=matrix.size(),m=matrix[0].size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                dp[i][j]=solve(i,j,n,m,matrix,dp);
                ans=max(ans,dp[i][j]);
            }
        }
        return ans;
    }
};
