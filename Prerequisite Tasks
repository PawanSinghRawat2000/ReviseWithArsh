class Solution {
public:

    bool checkCycle(int node,vector<vector<int>>&adj,vector<int>&vis,vector<int>&dfsVis){
        vis[node]=1;
        dfsVis[node]=1;
        for(auto it:adj[node]){
            if(!vis[it]){
                if(checkCycle(it,adj,vis,dfsVis))return true;
            }else if(dfsVis[it])return true;
        }
        dfsVis[node]=0;
        return false;
    }

	bool isPossible(int N,int P, vector<pair<int, int> >& prerequisites) {
	    // Code here
	    vector<vector<int>> adj(N);
	    for(auto it:prerequisites){
	        adj[it.second].push_back(it.first);
	    }
	    vector<int>vis(N,0);
	    vector<int>dfsVis(N,0);
	    for(int i=0;i<N;i++){
	        if(!vis[i]){
	            if(checkCycle(i,adj,vis,dfsVis))return false;
	        }
	    }
	    return true;
	}
};
